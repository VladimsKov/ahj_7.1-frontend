(()=>{"use strict";var e,t,n,r,o,a,c,d={478:(e,t,n)=>{n(177);class r{static createTicket(){const e=document.createElement("div");return e.classList.add("ticket"),e.insertAdjacentHTML("afterbegin",'<div class="check-ticket select-ctrl select-none"></div>\n    <div class="text-data"></div>\n    <div class="ticket-date"></div>\n    <div class="controls">\n    <div class="check-ticket change-ctrl"></div>\n    <div class="check-ticket del-ctrl"></div>\n    </div>'),e}static createTicketDate(e){const t=new Date(e);return`${t.getDate()<10?`0${t.getDate()}`:t.getDate()}.${t.getMonth()<9?`0${t.getMonth()+1}`:t.getMonth()+1}.${t.getFullYear()} ${t.getHours()<10?`0${t.getHours()}`:t.getHours()}:${t.getMinutes()<10?`0${t.getMinutes()}`:t.getMinutes()}`}}class o{static createModal(){o.modalWrap().insertAdjacentHTML("beforeend","<div class='modal-container'>\n    <p>Добавить тикет</p>\n    <form name='add_ticket'><p>Краткое описание</p>\n    <input name='modal_name' class='modal-name' required>\n    <p>Подробное описание</p>\n    <textarea name='modal_discr' class='modal-description' maxlength=\"200\"></textarea></form>\n    <div class='modal-btns'>\n    <button class='modal-btn' id='mod-cansel-btn'>Отмена</button>\n    <button class='modal-btn' id='mod-ok-btn'>ОК</button>\n    </div>\n    </div>"),document.querySelector(".modal-name").focus()}static delModal(){o.modalWrap().insertAdjacentHTML("beforeend","<div class='modal-container'>\n    <p>Удалить тикет</p><p>Вы уверены, что хотите удалить тикет? Это действие необратимо.</p>\n    <div class='modal-btns'>\n    <button class='modal-btn' id='mod-cansel-btn'>Отмена</button>\n    <button class='modal-btn' id='mod-ok-btn'>ОК</button>\n    </div>\n    </div>")}static changeModal(){o.modalWrap().insertAdjacentHTML("beforeend","<div class='modal-container'>\n    <p>Изменить тикет</p>\n    <form name='add_ticket'><p>Краткое описание</p>\n    <input name='modal_new_name' class='modal-name' required>\n    <p>Подробное описание</p>\n    <textarea name='modal_new_discr' class='modal-description' maxlength=\"200\"></textarea></form>\n    <div class='modal-btns'>\n    <button class='modal-btn' id='mod-cansel-btn'>Отмена</button>\n    <button class='modal-btn' id='mod-ok-btn'>ОК</button>\n    </div>\n    </div>"),document.querySelector(".modal-name").focus()}static modalWrap(){const e=document.createElement("div");return e.dataset.modal="modal-wrap",e.classList.add("modal-wrap"),document.body.append(e),e}static closemodal(){document.querySelector("[data-modal=modal-wrap]").remove()}}const a=document.querySelector(".tickets-wrap"),c="http://localhost:7000/";class d{static showTicketsRequest(){const e=new XMLHttpRequest;e.addEventListener("load",(()=>{if(e.status>=200&&e.status<300)try{const t=JSON.parse(e.responseText);if(a.replaceChildren(),!t.length)return void a.append("Пока нет тикетов");t.forEach((e=>{const t=r.createTicket();t.dataset.id=e.id;const n=t.querySelector(".select-ctrl"),c=t.querySelector(".del-ctrl"),i=t.querySelector(".change-ctrl");n.addEventListener("click",(()=>{n.classList.toggle("select-none")})),t.addEventListener("click",(n=>{if(!(n.target.classList.contains("change-ctrl")||n.target.classList.contains("del-ctrl")||n.target.classList.contains("select-ctrl"))){const n=t.querySelector(".descr-data");if(!n)return void d.detailTicket(e.id);n.remove()}})),i.addEventListener("click",(e=>{o.changeModal(),document.querySelector("#mod-cansel-btn").addEventListener("click",(()=>{o.closemodal()}));const t=e.currentTarget.closest(".ticket").dataset.id;document.querySelector("#mod-ok-btn").addEventListener("click",(()=>{d.changeTicket(t),document.querySelector(".modal-name").value&&o.closemodal()}))})),c.addEventListener("click",(e=>{o.delModal(),document.querySelector("#mod-cansel-btn").addEventListener("click",(()=>{o.closemodal()}));const t=e.currentTarget.closest(".ticket").dataset.id;document.querySelector("#mod-ok-btn").addEventListener("click",(()=>{d.deleteTicket(t),o.closemodal()}))}));const s=r.createTicketDate(e.created);t.querySelector(".text-data").insertAdjacentHTML("beforeend",`<p>${e.name}</p>`),t.querySelector(".ticket-date").append(s),a.append(t)}))}catch(e){console.error(e)}}));const t=`${c}?method=allTickets`;e.open("GET",t),e.send()}static addTicket(){if(!document.querySelector(".modal-name").value)return void alert("Введите краткое описание");const e=new XMLHttpRequest;e.addEventListener("load",(()=>{e.status>=200&&e.status<300&&d.showTicketsRequest()}));const t=new FormData(document.forms.add_ticket),n=`${c}?method=addTicket`;e.open("PUT",n),e.send(t)}static detailTicket(e){const t=new XMLHttpRequest;t.addEventListener("load",(()=>{if(t.status>=200&&t.status<300)try{const n=JSON.parse(t.response);document.querySelector(`[data-id="${e}"]`).querySelector(".text-data").insertAdjacentHTML("beforeend",`<p class='descr-data'>${n}</p>`)}catch(e){console.error(e)}}));const n=encodeURIComponent(e),r=`${c}?method=ticketById&id=${n}`;t.open("GET",r),t.send()}static deleteTicket(e){const t=new XMLHttpRequest;t.addEventListener("load",(()=>{t.status>=200&&t.status<300&&d.showTicketsRequest()}));const n=encodeURIComponent(e),r=`${c}?method=deleteTicket&delId=${n}`;t.open("DELETE",r),t.send()}static changeTicket(e){if(!document.querySelector(".modal-name").value)return void alert("Введите краткое описание");const t=new XMLHttpRequest;t.addEventListener("load",(()=>{t.status>=200&&t.status<300&&d.showTicketsRequest()}));const n=new FormData(document.forms.add_ticket),r=`${c}?method=changeTicket&changeId=${e}`;t.open("PATCH",r),t.send(n)}}const i=document.querySelector("[data-btn=add_ticket]");document.addEventListener("DOMContentLoaded",(()=>{d.showTicketsRequest()})),i.addEventListener("click",(()=>{o.createModal(),document.querySelector("#mod-cansel-btn").addEventListener("click",(()=>{o.closemodal()})),document.querySelector("#mod-ok-btn").addEventListener("click",(()=>{d.addTicket(),document.querySelector(".modal-name").value&&o.closemodal()}))}))},783:(e,t,n)=>{var r=n(618),o=Object.create(null),a="undefined"==typeof document,c=Array.prototype.forEach;function d(){}function i(e,t){if(!t){if(!e.href)return;t=e.href.split("?")[0]}if(l(t)&&!1!==e.isLoaded&&t&&t.indexOf(".css")>-1){e.visited=!0;var n=e.cloneNode();n.isLoaded=!1,n.addEventListener("load",(function(){n.isLoaded||(n.isLoaded=!0,e.parentNode.removeChild(e))})),n.addEventListener("error",(function(){n.isLoaded||(n.isLoaded=!0,e.parentNode.removeChild(e))})),n.href="".concat(t,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(n,e.nextSibling):e.parentNode.appendChild(n)}}function s(){var e=document.querySelectorAll("link");c.call(e,(function(e){!0!==e.visited&&i(e)}))}function l(e){return!!/^https?:/i.test(e)}e.exports=function(e,t){if(a)return console.log("no window.document found, will not HMR CSS"),d;var n,u,p=function(e){var t=o[e];if(!t){if(document.currentScript)t=document.currentScript.src;else{var n=document.getElementsByTagName("script"),a=n[n.length-1];a&&(t=a.src)}o[e]=t}return function(e){if(!t)return null;var n=t.split(/([^\\/]+)\.js$/),o=n&&n[1];return o&&e?e.split(",").map((function(e){var n=new RegExp("".concat(o,"\\.js$"),"g");return r(t.replace(n,"".concat(e.replace(/{fileName}/g,o),".css")))})):[t.replace(".js",".css")]}}(e);return n=function(){var e=p(t.filename),n=function(e){if(!e)return!1;var t=document.querySelectorAll("link"),n=!1;return c.call(t,(function(t){if(t.href){var o=function(e,t){var n;return e=r(e,{stripWWW:!1}),t.some((function(r){e.indexOf(t)>-1&&(n=r)})),n}(t.href,e);l(o)&&!0!==t.visited&&o&&(i(t,o),n=!0)}})),n}(e);if(t.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void s();n?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),s())},50,u=0,function(){var e=this,t=arguments,r=function(){return n.apply(e,t)};clearTimeout(u),u=setTimeout(r,50)}}},618:e=>{e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var t=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",n=e.replace(new RegExp(t,"i"),"").split("/"),r=n[0].toLowerCase().replace(/\.$/,"");return n[0]="",t+r+n.reduce((function(e,t){switch(t){case"..":e.pop();break;case".":break;default:e.push(t)}return e}),[]).join("/")}},177:(e,t,n)=>{var r=n(783)(e.id,{locals:!1});e.hot.dispose(r),e.hot.accept(void 0,r)}},i={};function s(e){var t=i[e];if(void 0!==t){if(void 0!==t.error)throw t.error;return t.exports}var n=i[e]={id:e,exports:{}};try{var r={id:e,module:n,factory:d[e],require:s};s.i.forEach((function(e){e(r)})),n=r.module,r.factory.call(n.exports,n,n.exports,r.require)}catch(e){throw n.error=e,e}return n.exports}s.m=d,s.c=i,s.i=[],s.hu=e=>e+"."+s.h()+".hot-update.js",s.miniCssF=e=>"main.css",s.hmrF=()=>"main."+s.h()+".hot-update.json",s.h=()=>"64b9b45a397372391701",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="ajs:",s.l=(n,r,o,a)=>{if(e[n])e[n].push(r);else{var c,d;if(void 0!==o)for(var i=document.getElementsByTagName("script"),l=0;l<i.length;l++){var u=i[l];if(u.getAttribute("src")==n||u.getAttribute("data-webpack")==t+o){c=u;break}}c||(d=!0,(c=document.createElement("script")).charset="utf-8",c.timeout=120,s.nc&&c.setAttribute("nonce",s.nc),c.setAttribute("data-webpack",t+o),c.src=n),e[n]=[r];var p=(t,r)=>{c.onerror=c.onload=null,clearTimeout(f);var o=e[n];if(delete e[n],c.parentNode&&c.parentNode.removeChild(c),o&&o.forEach((e=>e(r))),t)return t(r)},f=setTimeout(p.bind(null,void 0,{type:"timeout",target:c}),12e4);c.onerror=p.bind(null,c.onerror),c.onload=p.bind(null,c.onload),d&&document.head.appendChild(c)}},(()=>{var e,t,n,r={},o=s.c,a=[],c=[],d="idle",i=0,l=[];function u(e){d=e;for(var t=[],n=0;n<c.length;n++)t[n]=c[n].call(null,e);return Promise.all(t)}function p(){0==--i&&u("ready").then((function(){if(0===i){var e=l;l=[];for(var t=0;t<e.length;t++)e[t]()}}))}function f(e){if("idle"!==d)throw new Error("check() is only allowed in idle status");return u("check").then(s.hmrM).then((function(n){return n?u("prepare").then((function(){var r=[];return t=[],Promise.all(Object.keys(s.hmrC).reduce((function(e,o){return s.hmrC[o](n.c,n.r,n.m,e,t,r),e}),[])).then((function(){return t=function(){return e?m(e):u("ready").then((function(){return r}))},0===i?t():new Promise((function(e){l.push((function(){e(t())}))}));var t}))})):u(v()?"ready":"idle").then((function(){return null}))}))}function h(e){return"ready"!==d?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+d+")")})):m(e)}function m(e){e=e||{},v();var r=t.map((function(t){return t(e)}));t=void 0;var o=r.map((function(e){return e.error})).filter(Boolean);if(o.length>0)return u("abort").then((function(){throw o[0]}));var a=u("dispose");r.forEach((function(e){e.dispose&&e.dispose()}));var c,d=u("apply"),i=function(e){c||(c=e)},s=[];return r.forEach((function(e){if(e.apply){var t=e.apply(i);if(t)for(var n=0;n<t.length;n++)s.push(t[n])}})),Promise.all([a,d]).then((function(){return c?u("fail").then((function(){throw c})):n?m(e).then((function(e){return s.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):u("idle").then((function(){return s}))}))}function v(){if(n)return t||(t=[]),Object.keys(s.hmrI).forEach((function(e){n.forEach((function(n){s.hmrI[e](n,t)}))})),n=void 0,!0}s.hmrD=r,s.i.push((function(l){var m,v,g,y,b=l.module,k=function(t,n){var r=o[n];if(!r)return t;var c=function(c){if(r.hot.active){if(o[c]){var d=o[c].parents;-1===d.indexOf(n)&&d.push(n)}else a=[n],e=c;-1===r.children.indexOf(c)&&r.children.push(c)}else console.warn("[HMR] unexpected require("+c+") from disposed module "+n),a=[];return t(c)},s=function(e){return{configurable:!0,enumerable:!0,get:function(){return t[e]},set:function(n){t[e]=n}}};for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&"e"!==l&&Object.defineProperty(c,l,s(l));return c.e=function(e){return function(e){switch(d){case"ready":u("prepare");case"prepare":return i++,e.then(p,p),e;default:return e}}(t.e(e))},c}(l.require,l.id);b.hot=(m=l.id,v=b,y={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:g=e!==m,_requireSelf:function(){a=v.parents.slice(),e=g?void 0:m,s(m)},active:!0,accept:function(e,t,n){if(void 0===e)y._selfAccepted=!0;else if("function"==typeof e)y._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)y._acceptedDependencies[e[r]]=t||function(){},y._acceptedErrorHandlers[e[r]]=n;else y._acceptedDependencies[e]=t||function(){},y._acceptedErrorHandlers[e]=n},decline:function(e){if(void 0===e)y._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)y._declinedDependencies[e[t]]=!0;else y._declinedDependencies[e]=!0},dispose:function(e){y._disposeHandlers.push(e)},addDisposeHandler:function(e){y._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=y._disposeHandlers.indexOf(e);t>=0&&y._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,d){case"idle":t=[],Object.keys(s.hmrI).forEach((function(e){s.hmrI[e](m,t)})),u("ready");break;case"ready":Object.keys(s.hmrI).forEach((function(e){s.hmrI[e](m,t)}));break;case"prepare":case"check":case"dispose":case"apply":(n=n||[]).push(m)}},check:f,apply:h,status:function(e){if(!e)return d;c.push(e)},addStatusHandler:function(e){c.push(e)},removeStatusHandler:function(e){var t=c.indexOf(e);t>=0&&c.splice(t,1)},data:r[m]},e=void 0,y),b.parents=a,b.children=[],a=[],l.require=k})),s.hmrC={},s.hmrI={}})(),(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var t=s.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e})(),n=(e,t,n,r)=>{var o=document.createElement("link");return o.rel="stylesheet",o.type="text/css",o.onerror=o.onload=a=>{if(o.onerror=o.onload=null,"load"===a.type)n();else{var c=a&&("load"===a.type?"missing":a.type),d=a&&a.target&&a.target.href||t,i=new Error("Loading CSS chunk "+e+" failed.\n("+d+")");i.code="CSS_CHUNK_LOAD_FAILED",i.type=c,i.request=d,o.parentNode.removeChild(o),r(i)}},o.href=t,document.head.appendChild(o),o},r=(e,t)=>{for(var n=document.getElementsByTagName("link"),r=0;r<n.length;r++){var o=(c=n[r]).getAttribute("data-href")||c.getAttribute("href");if("stylesheet"===c.rel&&(o===e||o===t))return c}var a=document.getElementsByTagName("style");for(r=0;r<a.length;r++){var c;if((o=(c=a[r]).getAttribute("data-href"))===e||o===t)return c}},o=[],a=[],c=e=>({dispose:()=>{for(var e=0;e<o.length;e++){var t=o[e];t.parentNode&&t.parentNode.removeChild(t)}o.length=0},apply:()=>{for(var e=0;e<a.length;e++)a[e].rel="stylesheet";a.length=0}}),s.hmrC.miniCss=(e,t,d,i,l,u)=>{l.push(c),e.forEach((e=>{var t=s.miniCssF(e),c=s.p+t,d=r(t,c);d&&i.push(new Promise(((t,r)=>{var i=n(e,c,(()=>{i.as="style",i.rel="preload",t()}),r);o.push(d),a.push(i)})))}))},(()=>{var e,t,n,r,o,a=s.hmrS_jsonp=s.hmrS_jsonp||{179:0},c={};function d(t,n){return e=n,new Promise(((e,n)=>{c[t]=e;var r=s.p+s.hu(t),o=new Error;s.l(r,(e=>{if(c[t]){c[t]=void 0;var r=e&&("load"===e.type?"missing":e.type),a=e&&e.target&&e.target.src;o.message="Loading hot update chunk "+t+" failed.\n("+r+": "+a+")",o.name="ChunkLoadError",o.type=r,o.request=a,n(o)}}))}))}function i(e){function c(e){for(var t=[e],n={},r=t.map((function(e){return{chain:[e],id:e}}));r.length>0;){var o=r.pop(),a=o.id,c=o.chain,i=s.c[a];if(i&&(!i.hot._selfAccepted||i.hot._selfInvalidated)){if(i.hot._selfDeclined)return{type:"self-declined",chain:c,moduleId:a};if(i.hot._main)return{type:"unaccepted",chain:c,moduleId:a};for(var l=0;l<i.parents.length;l++){var u=i.parents[l],p=s.c[u];if(p){if(p.hot._declinedDependencies[a])return{type:"declined",chain:c.concat([u]),moduleId:a,parentId:u};-1===t.indexOf(u)&&(p.hot._acceptedDependencies[a]?(n[u]||(n[u]=[]),d(n[u],[a])):(delete n[u],t.push(u),r.push({chain:c.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}s.f&&delete s.f.jsonpHmr,t=void 0;var i={},l=[],u={},p=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var f in n)if(s.o(n,f)){var h,m=n[f],v=!1,g=!1,y=!1,b="";switch((h=m?c(f):{type:"disposed",moduleId:f}).chain&&(b="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(v=new Error("Aborted because of self decline: "+h.moduleId+b));break;case"declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(v=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+b));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(h),e.ignoreUnaccepted||(v=new Error("Aborted because "+f+" is not accepted"+b));break;case"accepted":e.onAccepted&&e.onAccepted(h),g=!0;break;case"disposed":e.onDisposed&&e.onDisposed(h),y=!0;break;default:throw new Error("Unexception type "+h.type)}if(v)return{error:v};if(g)for(f in u[f]=m,d(l,h.outdatedModules),h.outdatedDependencies)s.o(h.outdatedDependencies,f)&&(i[f]||(i[f]=[]),d(i[f],h.outdatedDependencies[f]));y&&(d(l,[h.moduleId]),u[f]=p)}n=void 0;for(var k,E=[],w=0;w<l.length;w++){var _=l[w],L=s.c[_];L&&(L.hot._selfAccepted||L.hot._main)&&u[_]!==p&&!L.hot._selfInvalidated&&E.push({module:_,require:L.hot._requireSelf,errorHandler:L.hot._selfAccepted})}return{dispose:function(){var e;r.forEach((function(e){delete a[e]})),r=void 0;for(var t,n=l.slice();n.length>0;){var o=n.pop(),c=s.c[o];if(c){var d={},u=c.hot._disposeHandlers;for(w=0;w<u.length;w++)u[w].call(null,d);for(s.hmrD[o]=d,c.hot.active=!1,delete s.c[o],delete i[o],w=0;w<c.children.length;w++){var p=s.c[c.children[w]];p&&(e=p.parents.indexOf(o))>=0&&p.parents.splice(e,1)}}}for(var f in i)if(s.o(i,f)&&(c=s.c[f]))for(k=i[f],w=0;w<k.length;w++)t=k[w],(e=c.children.indexOf(t))>=0&&c.children.splice(e,1)},apply:function(t){for(var n in u)s.o(u,n)&&(s.m[n]=u[n]);for(var r=0;r<o.length;r++)o[r](s);for(var a in i)if(s.o(i,a)){var c=s.c[a];if(c){k=i[a];for(var d=[],p=[],f=[],h=0;h<k.length;h++){var m=k[h],v=c.hot._acceptedDependencies[m],g=c.hot._acceptedErrorHandlers[m];if(v){if(-1!==d.indexOf(v))continue;d.push(v),p.push(g),f.push(m)}}for(var y=0;y<d.length;y++)try{d[y].call(null,k)}catch(n){if("function"==typeof p[y])try{p[y](n,{moduleId:a,dependencyId:f[y]})}catch(r){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:a,dependencyId:f[y],error:r,originalError:n}),e.ignoreErrored||(t(r),t(n))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:a,dependencyId:f[y],error:n}),e.ignoreErrored||t(n)}}}for(var b=0;b<E.length;b++){var w=E[b],_=w.module;try{w.require(_)}catch(n){if("function"==typeof w.errorHandler)try{w.errorHandler(n,{moduleId:_,module:s.c[_]})}catch(r){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:_,error:r,originalError:n}),e.ignoreErrored||(t(r),t(n))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:_,error:n}),e.ignoreErrored||t(n)}}return l}}}self.webpackHotUpdateajs=(t,r,a)=>{for(var d in r)s.o(r,d)&&(n[d]=r[d],e&&e.push(d));a&&o.push(a),c[t]&&(c[t](),c[t]=void 0)},s.hmrI.jsonp=function(e,t){n||(n={},o=[],r=[],t.push(i)),s.o(n,e)||(n[e]=s.m[e])},s.hmrC.jsonp=function(e,c,l,u,p,f){p.push(i),t={},r=c,n=l.reduce((function(e,t){return e[t]=!1,e}),{}),o=[],e.forEach((function(e){s.o(a,e)&&void 0!==a[e]?(u.push(d(e,f)),t[e]=!0):t[e]=!1})),s.f&&(s.f.jsonpHmr=function(e,n){t&&s.o(t,e)&&!t[e]&&(n.push(d(e)),t[e]=!0)})},s.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(s.p+s.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),s(478)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,